openapi: 3.0.3
info:
  title: WASA API
  description: Web Application for Social Advancement
  version: "1.0.0"

servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /session:
   post:
    tags: ["login"]
    summary: Logs in the user
    description: |
      If the user does not exist, it will be created,
      and an identifier is returned.
      If the user exists, the user identifier is returned.
    operationId: doLogin
    requestBody:
      description: User details
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Maria
                pattern: '^.+?$'
                minLength: 3
                maxLength: 16
            required: ["name"]
    responses:
      '201':
        description: User log-in action successful
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  # change if you decide to use an integer
                  # or any other type of identifier
                  type: string
                  example: "abcdef012345"

  /api/profile/username:
    put:
      tags: ["profile"]
      summary: Update user's username
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Username updated successfully

  /api/conversations:
    get:
      tags: ["conversations"]
      summary: Get user's conversations
      operationId: getMyConversations
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    conversationId:
                      type: integer
                    conversationPhoto:
                      type: string

  /api/conversations/{conversationId}:
    get:
      tags: ["conversations"]
      summary: Get specific conversation
      operationId: getConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Conversation details

  /api/messages:
    post:
      tags: ["messages"]
      summary: Send a new message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: integer
                content:
                  type: string
      responses:
        '201':
          description: Message sent successfully

    put:
      tags: ["messages"]
      summary: Forward a message
      operationId: forwardMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: integer
                conversationId:
                  type: integer
      responses:
        '200':
          description: Message forwarded successfully

  /api/reactions:
    put:
      tags: ["messages"]
      summary: Add comment to message
      operationId: commentMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: integer
                reaction:
                  type: string
      responses:
        '200':
          description: Comment added successfully

    delete:
      tags: ["messages"]
      summary: Remove comment from message
      operationId: uncommentMessage
      parameters:
        - name: messageId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment removed successfully

  /api/messages/{messageId}:
    delete:
      tags: ["messages"]
      summary: Delete a message
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Message deleted successfully

  /api/groups/{groupId}/members:
    post:
      tags: ["groups"]
      summary: Add member to group
      operationId: addToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Member added successfully

    delete:
      tags: ["groups"]
      summary: Leave group
      operationId: leaveGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully left group

  /api/groups/{groupId}/name:
    put:
      tags: ["groups"]
      summary: Update group name
      operationId: setGroupName
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupname:
                  type: string
      responses:
        '200':
          description: Group name updated successfully

  /api/profile/photo:
    put:
      tags: ["profile"]
      summary: Update user's photo
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Photo updated successfully

  /api/groups/{groupId}/photo:
    put:
      tags: ["groups"]
      summary: Update group photo
      operationId: setGroupPhoto
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Group photo updated successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security:
  - BearerAuth: []
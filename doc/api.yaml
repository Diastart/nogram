openapi: 3.0.3
info:
  title: Nogram Final API
  version: "1.0.0"
  description: |
    OpenAPI spec reflecting the routes in Diastart/nogram main.go,
    plus placeholders for forwardMessage, commentMessage, and
    uncommentMessage. The other 11 operationIds match your existing
    backend routes.

servers:
  - url: http://localhost:3000
    description: Local dev server

paths:

  ########################################################################
  # REAL ROUTES FROM main.go (with professor-required operationIds where possible)
  ########################################################################

  # 1) /session -> POST => doLogin
  /session:
    post:
      operationId: doLogin
      summary: Sign in or register a user (simplified login)
      description: >
        If the user does not exist, create one.  
        If the user exists, return their identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Maria"
      responses:
        '201':
          description: Created or found user
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  # /profile -> GET => getProfile (additional, not in the professor's list)
  /profile:
    get:
      operationId: getProfile
      summary: Retrieve the current user's profile
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  photo:
                    type: string
                    format: uri
        '401':
          description: Unauthorized

  # 2) /profile/username -> PUT => setMyUserName
  /profile/username:
    put:
      operationId: setMyUserName
      summary: Update the current user's username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                username:
                  type: string
                  example: "NewName"
      responses:
        '200':
          description: Username updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  # 13) /profile/photo -> PUT => setMyPhoto
  /profile/photo:
    put:
      operationId: setMyPhoto
      summary: Update the current user's photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Photo updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  # /users -> GET => getUsers (additional)
  /users:
    get:
      operationId: getUsers
      summary: Retrieve all users
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  # /companions -> GET => getCompanions (additional)
  /companions:
    get:
      operationId: getCompanions
      summary: Retrieve a list of companions
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of companions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    username:
                      type: string
        '401':
          description: Unauthorized

  # /dialogs -> GET => getDialogs (additional)
  /dialogs:
    get:
      operationId: getDialogs
      summary: Retrieve user dialogs
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of dialogs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    companion1Id:
                      type: string
                    companion2Id:
                      type: string
        '401':
          description: Unauthorized

  # /latest/messages -> GET => getLatestMessages (additional)
  /latest/messages:
    get:
      operationId: getLatestMessages
      summary: Retrieve the latest messages for certain companions
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: companions
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Latest messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    companionId:
                      type: string
                    content:
                      type: string
                    time:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized

  # 3) /conversations -> GET => getMyConversations
  /conversations:
    get:
      operationId: getMyConversations
      summary: Retrieve the current user's conversations
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    conversationId:
                      type: string
                      example: "conv123"
        '401':
          description: Unauthorized

  # 4) /conversations/{conversationId} -> GET => getConversation
  /conversations/{conversationId}:
    get:
      operationId: getConversation
      summary: Retrieve details for a specific conversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
                  participants:
                    type: array
                    items:
                      type: string
        '404':
          description: Conversation not found
        '401':
          description: Unauthorized

  # /messages -> GET, POST, DELETE => getMessages, sendMessage, deleteMessage
  # 5) sendMessage
  # 9) deleteMessage
  /messages:
    get:
      operationId: getMessages
      summary: Retrieve messages for a conversation
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: conversationId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized

    post:
      operationId: sendMessage
      summary: Send a new message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                conversationId:
                  type: string
                content:
                  type: string
                photo:
                  type: string
                  format: binary
                  nullable: true
      responses:
        '201':
          description: Message created
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

    delete:
      operationId: deleteMessage
      summary: Delete a message
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: messageId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message deleted
        '404':
          description: Message not found
        '401':
          description: Unauthorized

  # /members -> Possibly POST => addToGroup, DELETE => leaveGroup
  # 10) addToGroup
  # 11) leaveGroup
  /members:
    post:
      operationId: addToGroup
      summary: Add a user to a group conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                conversationId:
                  type: string
                  description: Group conversation ID
                userId:
                  type: string
      responses:
        '200':
          description: User added
        '401':
          description: Unauthorized
        '404':
          description: Not found

    delete:
      operationId: leaveGroup
      summary: Leave the group (remove the current user from it)
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: conversationId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User removed from the group
        '401':
          description: Unauthorized
        '404':
          description: Not found

  # 12) /groups/groupname -> PUT => setGroupName
  /groups/groupname:
    put:
      operationId: setGroupName
      summary: Update a group's name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                conversationId:
                  type: string
                groupName:
                  type: string
      responses:
        '200':
          description: Group name updated
        '401':
          description: Unauthorized

  # 14) /groups/photo -> PUT => setGroupPhoto
  /groups/photo:
    put:
      operationId: setGroupPhoto
      summary: Update a group's photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                conversationId:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Group photo updated
        '401':
          description: Unauthorized

  # /reactions -> PUT, DELETE => (not in the professor's mandatory list)
  /reactions:
    put:
      operationId: updateReaction
      summary: Add or update a reaction on a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                messageId:
                  type: string
                reaction:
                  type: string
      responses:
        '200':
          description: Reaction updated
        '401':
          description: Unauthorized

    delete:
      operationId: removeReaction
      summary: Remove a reaction from a message
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: messageId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reaction removed
        '401':
          description: Unauthorized
        '404':
          description: Not found

  /candidates:
    post:
      operationId: addCandidate
      summary: Add a candidate user to a group or conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                conversationId:
                  type: string
                userId:
                  type: string
      responses:
        '200':
          description: Candidate added
        '401':
          description: Unauthorized


  ########################################################################
  # PLACEHOLDERS FOR "forwardMessage", "commentMessage", "uncommentMessage"
  # (Because your professor demands them, but they do not exist in main.go)
  ########################################################################

  # 6) forwardMessage
  /messages/placeholder-forward:
    post:
      operationId: forwardMessage
      summary: [Placeholder] Forward an existing message
      description: |
        This endpoint does not exist in main.go, but is listed to satisfy
        the professor's requirement for the operationId "forwardMessage".
      requestBody:
        required: false
      responses:
        '501':
          description: Not Implemented

  # 7) commentMessage
  /messages/placeholder-comment:
    post:
      operationId: commentMessage
      summary: [Placeholder] Add a comment to a message
      description: |
        Placeholder only. Not implemented in main.go.
      requestBody:
        required: false
      responses:
        '501':
          description: Not Implemented

  # 8) uncommentMessage
  /messages/placeholder-uncomment:
    delete:
      operationId: uncommentMessage
      summary: [Placeholder] Remove a previously added comment
      description: |
        Placeholder only. Not implemented in main.go.
      parameters: []
      responses:
        '501':
          description: Not Implemented


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        photo:
          type: string
          format: uri

    Message:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        senderId:
          type: string
        createdAt:
          type: string
          format: date-time
        photo:
          type: string
          nullable: true
